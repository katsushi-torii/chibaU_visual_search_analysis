import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib import rcParams

# 日本語フォント設定
rcParams['font.family'] = 'MS Gothic'

# 進出度（実験1）の正規化されたデータ
exp1_ranking = {
    '赤': [0.4367, 1.0000, 1.0000, 0.5615, 1.0000, 0.7865],
    '赤紫': [0.3954, 0.2039, 0.1605, 0.3330, 0.5031, 0.3849],
    'ピンク': [0.2969, 0.0672, -0.0296, 0.5615, -0.0383, 0.5816],
    '紫': [0.2688, 0.0345, 0.0867, 0.1211, -0.0786, -0.3772],
    '黄赤': [0.2155, -0.0485, 0.0263, 0.0170, -0.0595, 0.3849],
    '青紫': [0.1634, -0.0977, 0.0556, 0.1211, -0.1465, 0.1934],
    '青': [0.1099, -0.1458, -0.0570, -0.0000, -0.1631, 0.0042],
    '緑': [0.0811, -0.0734, -0.1697, -0.0877, -0.1800, 0.3849],
    '青緑': [0.0111, -0.1703, -0.1697, 0.0170, -0.1977, -0.1851],
    '黄緑': [-0.4894, -0.1958, -0.2316, 0.1211, -0.0964, -0.3772],
    '黄': [-0.4894, -0.2517, -0.2659, -0.0877, -0.2166, -0.7809],
    '灰': [-1.0000, -0.3224, -0.4057, -0.6782, -0.3264, -1.0000]
}

# 正解率のデータ（80%～100%に範囲を統一）
accuracy_data = {
    '赤': [92.86, 100.0, 92.86, 95.65, 100.0, 100.0],
    '赤紫': [84.00, 80.77, 79.17, 89.47, 100.0, 63.16],
    'ピンク': [100.0, 91.67, 81.82, 82.35, 100.0, 82.35],
    '紫': [95.45, 88.89, 73.68, 84.00, 54.55, 100.0],
    '青紫': [88.89, 86.67, 82.61, 89.47, 100.0, 84.00],
    '青': [95.00, 100.0, 90.48, 100.0, 100.0, 100.0],
    '青緑': [86.36, 100.0, 75.00, 93.75, 87.50, 100.0],
    '緑': [91.30, 100.0, 72.73, 78.95, 90.00, 88.24],
    '黄緑': [100.0, 100.0, 60.00, 94.44, 86.67, 88.89],
    '黄': [93.75, 100.0, 96.77, 100.0, 100.0, 95.24],
    '黄赤': [100.0, 100.0, 91.67, 100.0, 100.0, 100.0],
    '灰': [100.0, 100.0, 100.0, 95.45, 100.0, 100.0]
}

# 反応時間のデータ（範囲を統一するために全データの最小値と最大値を求める）
exp2_reaction_time = {
    '赤': [1703, 1270, 987, 1465, 1352, 1037],
    '赤紫': [1919, 1584, 1236, 1579, 1470, 1108],
    'ピンク': [1571, 1453, 1063, 1394, 1326, 1106],
    '紫': [1802, 1713, 1012, 1382, 1636, 1112],
    '青紫': [1566, 1686, 1133, 1403, 1464, 1137],
    '青': [1546, 1382, 1130, 1286, 1414, 1056],
    '青緑': [1770, 1398, 980, 1350, 1462, 1138],
    '緑': [2003, 1451, 1074, 1339, 1432, 1231],
    '黄': [1623, 1322, 1170, 1326, 1382, 1102],
    '黄緑': [1730, 1559, 1071, 1462, 1443, 1256],
    '黄赤': [1517, 1310, 1154, 1304, 1329, 1063],
    '灰': [1375, 1415, 1083, 1429, 1359, 1077]
}

# データフレームに変換
exp1_df = pd.DataFrame(exp1_ranking).T
exp2_df = pd.DataFrame(exp2_reaction_time).T
accuracy_df = pd.DataFrame(accuracy_data).T

# 反応時間を統一するための最小値と最大値を取得
min_reaction_time = np.min(exp2_df.min())
max_reaction_time = np.max(exp2_df.max())

# 正解率の範囲を80〜100に設定して余白を加える
accuracy_margin = 0.02  # 上下に2%余白を加える
min_accuracy = 80 - accuracy_margin * 100
max_accuracy = 100 + accuracy_margin * 100

# 反応時間の範囲を統一するために余白を加える
reaction_time_margin = 0.05  # 上下に5%余白を加える
min_reaction_time = min_reaction_time - reaction_time_margin * (max_reaction_time - min_reaction_time)
max_reaction_time = max_reaction_time + reaction_time_margin * (max_reaction_time - min_reaction_time)


# 進出度（横軸）の範囲を-1から+1に統一して余白を加える
exp1_margin = 0.05  # 上下に5%余白を加える
min_exp1 = -1 - exp1_margin  # 進出度の最小値
max_exp1 = 1 + exp1_margin   # 進出度の最大値

# 進出度と正解率、進出度と反応時間の散布図を作成
for subject_index in range(exp1_df.shape[1]):  # 各被験者
    plt.figure(figsize=(12, 6))

    # 進出度と正解率の散布図
    plt.subplot(1, 2, 1)
    plt.scatter(exp1_df.iloc[:, subject_index], accuracy_df.iloc[:, subject_index], color='blue')
    plt.xlabel('進出度')
    plt.ylabel('正解率')
    plt.xlim(min_exp1, max_exp1) 
    plt.ylim(min_accuracy, max_accuracy)  # 正解率に余白を加えた範囲
    plt.grid(True)

    # 進出度と反応時間の散布図
    plt.subplot(1, 2, 2)
    plt.scatter(exp1_df.iloc[:, subject_index], exp2_df.iloc[:, subject_index], color='red')
    plt.xlabel('進出度')
    plt.ylabel('反応時間')
    plt.xlim(min_exp1, max_exp1) 
    plt.ylim(min_reaction_time, max_reaction_time)  # 反応時間に余白を加えた範囲
    plt.grid(True)

    # グラフを表示
    plt.tight_layout()
    plt.show()  # 必須：グラフを表示


